- name: check for gpu
  when: ansible_distribution in [ 'Ubuntu', 'Arch', 'Archlinux' ]
  shell: "lspci | grep ' VGA '"
  register: gpulookup

- name: install nvidia
  when: ansible_distribution in [ 'Ubuntu', 'Arch', 'Archlinux' ] and 'NVIDIA' in gpulookup.stdout_lines
  tags: [ 'never', 'nvidia' ]
  vars:
    distro_packages:
      'Arch':
        gpu_driver:
      'Archlinux':
        gpu_driver: 'nvidia'
        gpu_driver_utils: 'lib32-nvidia-utils'
        vulkan32: 'lib32-nvidia-utils'
      'Ubuntu':
        gpu_driver:
  package:
    update_cache: true
    name:
      # gpu driver
      - "{{ distro_packages[ansible_distribution]['gpu_driver'] | default ('') }}"
      - "{{ distro_packages[ansible_distribution]['gpu_driver_utils'] | default ('') }}" # gpu driver utils
      - "{{ distro_packages[ansible_distribution]['vulkan32'] | default ('') }}"  # 32bit vulkan driver

- name: install amd
  when: ansible_distribution in [ 'Ubuntu', 'Arch', 'Archlinux' ] and 'AMD' in gpulookup.stdout_lines
  tags: [ 'never', 'amd' ]
  debug:
    msg: "TODO install AMD drivers"

- name: install xmonad
  when: ansible_distribution in [ 'Ubuntu', 'Arch', 'Archlinux' ]

  vars:
    distro_packages:
      'Arch':
        wallpaper: 'archlinux-wallpaper'
      'Archlinux':
        haskell_nw_info: 'haskell-network-info'
        haskell_hostname: 'haskell-hostname'
        nm_applet: 'network-manager-applet'
        wallpaper: 'archlinux-wallpaper'
        notify_daemon: 'dunst'
        login_manager: 'lxdm'
        xmonad_contrib: 'xmonad-contrib'
        compositor: 'picom'
        xorg: 'xorg-server'
        alsa_pulse_bridge: 'pulseaudio-alsa'
        xev: 'xorg-xev'
      'Ubuntu':
        haskell_nw_info: 'libghc-network-info-dev'
        haskell_hostname: 'libghc-hostname-dev'
        nm_applet: 'network-manager-gnome'
        wallpaper: 'ubuntu-wallpapers'
        login_manager: 'gdm3'
        xmonad_contrib: 'libghc-xmonad-contrib-dev'
        compositor: 'compton'
        xorg: 'xorg'
        notify_daemon: 'gnome-shell-extension-appindicator'
        alsa_pulse_bridge: 'libasound2'
        xev: 'x11-utils'
  package:
    update_cache: true
    name:
      - "{{ distro_packages[ansible_distribution]['xorg'] | default ('') }}"
      # required for xmonad default config
      - xterm
      # login screen
      - "{{ distro_packages[ansible_distribution]['login_manager'] | default ('') }}"
      - arandr # convenient gui for setting resolution
      - xmonad # tiling window manager
      - "{{ distro_packages[ansible_distribution]['xmonad_contrib'] | default ('') }}" # lib with features for xmonad
      - "{{ distro_packages[ansible_distribution]['haskell_hostname'] | default ('') }}"  # haskell Network.Hostname
      - "{{ distro_packages[ansible_distribution]['haskell_nw_info'] | default ('') }}"  # haskell Network.Info
      - xmobar # panel for xmonad
      - "{{ distro_packages[ansible_distribution]['notify_daemon'] | default ('') }}"  # notification server
      - scrot # do screenshots
      - playerctl # cli to control media player
      - xdotool # for automating key presses in xmobar
      - xclip # clipboard for x session
      - rofi # application launcher
      - hoogle # haskell api search
      - "{{ distro_packages[ansible_distribution]['compositor'] | default ('') }}" # compositor
      - nitrogen # for wallpapers
      - "{{ distro_packages[ansible_distribution]['wallpaper'] | default ('') }}"  # wallpapers
      # networkmanager tray icon
      - "{{ distro_packages[ansible_distribution]['nm_applet'] | default ('') }}"
      - pasystray # pulse audio tray icon
      - pavucontrol # pulse audio volume control
      - pulseaudio
      - "{{ distro_packages[ansible_distribution]['alsa_pulse_bridge'] | default ('') }}"
      - firefox
      - trayer # system tray
      # debug x events
      - "{{ distro_packages[ansible_distribution]['xev'] | default ('') }}"
      - screenkey
  register: install_packages_result
#  changed_when:  install_packages_result.packages | length > 0

- name: install additional arch packages (FIXME)
  when: ansible_distribution in ['Arch', 'Archlinux']
  package:
    update_cache: true
    name:
      - ttf-freefont
      - ttf-liberation
      - ttf-droid

- name: install nerd fonts
  import_tasks: install-nerd-fonts.yml

- name: install alacritty
  import_tasks: install-alacritty.yml

- name: config lxdm
  import_tasks: config-lxdm.yml

- name: isntall thunar
  import_tasks: install-thunar.yml

#- name: Set changed condition based on package manager
# FIXME
#  set_fact:
#    packages_installed: "{{ install_packages_result.packages | default([]) }}"
#    cache_updated: "{{ install_packages_result.cache_update }}"
#    changed_when:
#      - packages_installed | length > 0
#      - cache_updated is defined and cache_updated == True
#      - ansible_pkg_mgr == 'pacman'  # Check if pacman was used
#      - packages_installed is not defined and cache_updated == True


- name: Set profile to default-release in firefox.desktop
  vars:
    default_firefox_profile: "default-release"
  replace:
    path: /usr/share/applications/firefox.desktop
    # todo fixme regex is broken
    regexp: '^((xoxoExec=)(?!.*-P {{ default_firefox_profile }}.*))'
    replace: '\1 -P {{ default_firefox_profile }}'

- name: install klavaro
  when: ansible_distribution in [ 'Arch', 'Archlinux', 'Ubuntu' ]
  import_tasks: install-klavaro.yml

- import_tasks: install-discord.yml

- import_tasks: install-signal.yml

- import_tasks: install-strawberry.yml

- import_tasks: install-libreoffice.yml

- name: check dotfiles exist
  when: lookup('ansible.builtin.env','USER_NM')|length>0 
  vars:
    user: "{{ lookup('ansible.builtin.env','USER_NM') }}"
  stat:
    path: "{{ dot_files }}"
  register: dotfiles

- name: config user
  when: lookup('ansible.builtin.env','USER_NM')|length>0 and dotfiles.stat.exists
  become: true
  become_user: "{{ user }}"
  block:
  - name: config alacritty
    when: ansible_distribution in [ 'Ubuntu', 'Arch', 'Archlinux' ]
    import_tasks: user-cfg-alacritty.yml

  - name: config omz
    when: ansible_distribution in [ 'Ubuntu', 'Arch', 'Archlinux' ]
    import_tasks: user-cfg-omz.yml

  - name: config rofi
    when: ansible_distribution in [ 'Ubuntu', 'Arch', 'Archlinux' ]
    # todo improve config
    import_tasks: user-cfg-rofi.yml

  - name: config xmonad (arch)
    vars:
      xmonad_config_dir: "{{ userhome }}/.config/xmonad"
    when: ansible_distribution in [ 'Arch', 'Archlinux' ]
    import_tasks: user-cfg-xmonad.yml

  - name: config xmonad (ubuntu)
    vars:
      xmonad_config_dir: "{{ userhome }}/.xmonad"
    when: ansible_distribution in [ 'Ubuntu' ]
    import_tasks: user-cfg-xmonad.yml

  - name: config xmobar
    when: ansible_distribution in [ 'Ubuntu', 'Arch', 'Archlinux' ]
    # todo improve config
    import_tasks: user-cfg-xmobar.yml
  
  - name: config nitrogen
    when: ansible_distribution in [ 'Ubuntu', 'Arch', 'Archlinux' ]
    # todo improve config
    import_tasks: user-cfg-nitrogen.yml

  - name: config dunst
    when: ansible_distribution in [ 'Arch', 'Archlinux' ]
    import_tasks: user-cfg-dunst.yml

  - name: install tmux
    import_tasks: user-cfg-tmux.yml